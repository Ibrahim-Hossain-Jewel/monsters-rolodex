{"version":3,"sources":["component/card/card.component.jsx","component/card-list/card-list-component.jsx","component/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","prop","console","log","className","alt","src","jewel","id","name","email","CardList","monster","map","data","Searchbox","placeholder","handleChange","type","size","onChange","App","e","setState","searchField","target","value","state","fetch","then","dataFile","json","monsterName","this","soughtMonster","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAEaA,EAAO,SAACC,GAEjB,OADAC,QAAQC,IAAIF,GAER,sBAAKG,UAAU,iBAAf,UACI,qBAAKC,IAAK,QAAQC,IAAG,+BAA2BL,EAAKM,MAAMC,GAAtC,4BACrB,6BAAKP,EAAKM,MAAME,OAChB,4BAAIR,EAAKM,MAAMG,YCJdC,EAAW,SAACV,GACrB,OACI,qBAAKG,UAAY,YAAjB,SAEOH,EAAKW,QAAQC,KAAI,SAAAC,GAAI,OAChB,cAAC,EAAD,CAAsBP,MAASO,GAAlBA,EAAKN,UCNzBO,G,MAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACpC,OAAO,uBAAOb,UAAU,YAChBc,KAAK,SAASC,KAAK,KACnBH,YAAeA,EACfI,SAAYH,MC8BTI,E,kDA/Bb,aAAc,IAAD,8BACX,gBAaFJ,aAAe,SAAAK,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAZrC,EAAKC,MAAQ,CACXf,QAAS,GACTY,YAAa,IALJ,E,qDASb,WAAoB,IAAD,OACjBI,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAAAG,GAAW,OAAI,EAAKT,SAAS,CAACX,QAASoB,S,oBAOpI,WAAS,IAAD,EAC2BC,KAAKN,MAA9Bf,EADF,EACEA,QAASY,EADX,EACWA,YACXU,EAAgBtB,EAAQuB,QAAO,SAAAvB,GAAO,OAAEA,EAAQH,KAAK2B,cAAcC,SAASb,EAAYY,kBAG9F,OACE,sBAAKhC,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CAAWY,YAAc,iBAAiBC,aAAgBgB,KAAKhB,eAC/D,cAAC,EAAD,CAAUL,QAAWsB,W,GA3BXI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6c0d5bfb.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.style.css';\r\nexport const Card = (prop) => {\r\n    console.log(prop);\r\n    return (\r\n        <div className=\"card-container\">\r\n            <img alt= \"robot\" src= {`https://robohash.org/${prop.jewel.id}?set=set2&size=200x200`} />\r\n            <h1>{prop.jewel.name}</h1>\r\n            <p>{prop.jewel.email}</p>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport '../card-list/card-list-style.css'\r\nimport { Card } from '../card/card.component';\r\n\r\nexport const CardList = (prop) => {\r\n    return(\r\n        <div className = \"card-list\">\r\n           {\r\n               prop.monster.map(data => \r\n                    <Card key = {data.id} jewel = {data} />\r\n                    //here jewel is object name in card component\r\n                    //key needs for indicate that each component is unique\r\n                )\r\n           }\r\n        </div>\r\n    );\r\n}","//search-box component\r\nimport React from \"react\";\r\nimport './search-box.style.css';\r\nexport const Searchbox = ({placeholder, handleChange}) => {\r\n    return <input className=\"searchBox\"\r\n            type=\"search\" size=\"30\" \r\n            placeholder = {placeholder}\r\n            onChange = {handleChange}\r\n            />\r\n}","import './App.css';\nimport { Component } from 'react';\nimport { CardList } from './component/card-list/card-list-component';\nimport { Searchbox } from './component/search-box/search-box.component';\n\nclass App extends Component{\n  constructor(){\n    super();\n    //state is the data container.\n    this.state = {\n      monster: [],\n      searchField: ''\n    }\n  }\n  //now call the fetch api here.\n  componentDidMount(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\").then(dataFile => dataFile.json()).then(monsterName => this.setState({monster: monsterName}));\n  }\n  //now make an user defined function for class componenet.\n  //arrow function automatically atttached to the component class or inside componenet class contructor so dosen't need to attach to the contructor fuction\n  handleChange = e => {\n    this.setState({searchField: e.target.value});\n  }\n  render(){\n    const { monster, searchField } = this.state;\n    const soughtMonster = monster.filter(monster=>monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    //soughtMonster return monsterObject\n    /* onChange accept the synthetic event on the input tag*/\n    return(\n      <div className=\"App\">\n        <h2>Monster Rolodex</h2>\n        <Searchbox placeholder = \"Search Monster\" handleChange = {this.handleChange}/>\n        <CardList monster = {soughtMonster} />\n      </div>\n    )\n  }\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}